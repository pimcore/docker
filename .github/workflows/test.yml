name: Docker TEST

on:
    workflow_dispatch:
    pull_request:

env:
    IMAGE_NAME: pimcore/pimcore

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php: [ '8.0', '8.1', '8.2' ]
                distro: [ bullseye ]
                target: [ fpm, debug, supervisord ]
        steps:
            -   uses: actions/checkout@v2
            -   name: Test Tags
                run: |
                    set -ex
                    
                    DOCKER_PLATFORMS=linux/amd64,linux/arm64
                    PHP_VERSION=${{ matrix.php }}
                    DEBIAN_VERSION="${{ matrix.distro }}"
                    TARGET=pimcore_php_${{ matrix.target }}
                    VERSION="edge"
                    PHP_SUB_VERSION=$(docker run -i --rm php:${{ matrix.php }}-fpm-${{ matrix.distro }} php -r 'echo PHP_VERSION;')

                    if [ "${{ matrix.target }}" = "fpm" ]; then
                        BASE_TAG="php${{ matrix.php }}"
                        BASE_TAG_DETAILED="php${PHP_SUB_VERSION}"
                    else
                        BASE_TAG="php${{ matrix.php }}-${{ matrix.target }}"
                        BASE_TAG_DETAILED="php${PHP_SUB_VERSION}-${{ matrix.target }}"
                    fi

                    if [ "${{ github.event_name }}" = "schedule" ]; then
                        VERSION="dev"
                    fi

                    if [[ $GITHUB_REF == refs/tags/* ]]; then
                        VERSION=${GITHUB_REF#refs/tags/v}
                    fi

                    TAG="${BASE_TAG}-${VERSION}"
                    TAG_DETAILED="${BASE_TAG_DETAILED}-${VERSION}"
                    TAGS="--tag ${IMAGE_NAME}:${TAG}"

                    TAGS="$TAGS --tag ${IMAGE_NAME}:${TAG_DETAILED}"

                    echo $TAGS
            -   name: Build Image
                run: |
                    set -ex
                    docker build --tag pimcore-image --target=pimcore_php_${{ matrix.target }} --build-arg PHP_VERSION="${{ matrix.php }}" --build-arg DEBIAN_VERSION="${{ matrix.distro }}" .
                
                    if [ "${{ matrix.target }}" == "debug" ]; then
                        # Make sure xdebug is installed and configured on debug-build
                        docker run --rm pimcore-image sh -c 'php -m | grep xdebug'
                        docker run --rm pimcore-image test -f /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
                        # Check if entrypoint did it's job and generated xdebug configuration
                        docker run --rm pimcore-image php -r 'assert("PHPSTORM" === ini_get("xdebug.idekey"));'
                        docker run --rm -e XDEBUG_HOST=pim.co.re pimcore-image sh -c 'php -i | grep "xdebug.*pim\.co\.re"'
                    else
                        # Make sure xdebug is neither activated nor configured on non-debug build
                        docker run --rm pimcore-image sh -c '! php -m | grep xdebug'
                        docker run --rm pimcore-image test ! -f /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
                    fi
                    
                    docker run --rm pimcore-image composer create-project pimcore/skeleton:^10.0 pimcore --no-scripts
                    docker run -v "$(pwd)/.github/files":/var/www/html --rm pimcore-image php test_heif.php
            -   name: Run Trivy vulnerability scanner
                uses: aquasecurity/trivy-action@master
                with:
                    image-ref: 'pimcore-image'
                    format: 'table'
                    exit-code: '1'
                    ignore-unfixed: true
                    vuln-type: 'os,library'
                    severity: 'CRITICAL,HIGH'